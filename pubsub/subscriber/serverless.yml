service: lambda-consumer


custom:
  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/poc-demo
  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:poc-demo
  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:poc-demo

provider:
  name: aws
  runtime: nodejs6.10
  profile: poc-delivery
  region: ap-southeast-1
  stage: dev
  deploymentBucket: salle-serverless-deployment
  iamRoleStatements:
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
      # Refine policy
      # - sqs:DeleteMessage
      # - sqs:ReceiveMessage
    Resource: ${self:custom.SQS_ARN}
    Condition:
      ArnEquals:
        aws:SourceArn: ${self:custom.SNS_ARN}

functions:
  hello:
    handler: handler.consumer
    events:
      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.
      - sns:
          arn: ${self:custom.SNS_ARN}
    environment:
      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}

# TODO: Move dead-letter queue creation to setup.js
# resources:
#   Resources:
#     Messages:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: ${self:service}
#         MessageRetentionPeriod: 1209600
#         VisibilityTimeout: 60
#         RedrivePolicy:
#           deadLetterTargetArn:
#             Fn::GetAtt:
#             - MessagesDeadLetterQueue
#             - Arn
#           maxReceiveCount: 10

#     MessagesDeadLetterQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: ${self:service}-dead-letter-queue
#         MessageRetentionPeriod: 1209500