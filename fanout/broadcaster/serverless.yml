service: poc-broadcaster

custom:
  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/Initiator
  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:Initiator
  # SNS you are subscribing to
  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Initiator
  # SNS you want to publish to (Format: TOPIC_SNS_ARN)
  EMAIL_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Email # Should be lowercase and separated by -
  PUSH_NOTIFICATION_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PushNotification

provider:
  name: aws
  runtime: nodejs6.10
  profile: poc-delivery
  region: ap-southeast-1
  stage: dev
  deploymentBucket: salle-serverless-deployment
  iamRoleStatements:
  # Subscribe to a SNS Topic
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: ${self:custom.SQS_ARN}
    Condition:
      ArnEquals:
        aws:SourceArn: ${self:custom.SNS_ARN}
  # Publish to multiple SNS Topics
  - Effect: Allow
    Action:
      - sns:Publish
    Resource: 
      - ${self:custom.EMAIL_SNS_ARN}
      - ${self:custom.PUSH_NOTIFICATION_SNS_ARN}

functions:
  broadcaster:
    handler: handler.index
    events:
      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.
      - sns:
          arn: ${self:custom.SNS_ARN}
    environment:
      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}
      EMAIL_SNS_ARN: ${self:custom.EMAIL_SNS_ARN}
      PUSH_NOTIFICATION_SNS_ARN: ${self:custom.PUSH_NOTIFICATION_SNS_ARN}